/*
 * To change this license header, choose License Headers in Project Properties. To change this
 * template file, choose Tools | Templates and open the template in the editor.
 */
package com.ivan.app.view;

import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.IOException;
import javax.swing.Timer;
import com.ivan.app.temp.Receiver;
import com.ivan.app.utils.ImageUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 *
 * @author ivan
 */
public class DynamicShareScreenReceiverPanel extends javax.swing.JPanel {

    private static final Logger LOG = LogManager.getLogger(DynamicShareScreenReceiverPanel.class);

    private static final long serialVersionUID = 3064811163288249731L;
    private Receiver receiver;
    private Timer timer;
    private String host;
    private int port;
    private BufferedImage image;

    public DynamicShareScreenReceiverPanel(String host, int port) {
        initComponents();

        this.host = host;
        this.port = port;
        this.receiver = new Receiver();

        this.timer = new Timer(1000 / 30, e -> {
            this.timerEvent();
        });
    }

    private void timerEvent() {

        if (this.receiver.isReady()) {
            try {
                byte[] imgData = receiver.receiveImage(host, port);
                BufferedImage img = ImageUtils.createImageFromBytes(imgData);

                if (img == null) {
                    return;
                }
                image = ImageUtils.resize(img, this.getWidth(), this.getHeight());
            } catch (IOException e) {
                LOG.error(e);
            }
        }

        this.repaint();
    }

    @Override
    public void addNotify() {
        super.addNotify();
        this.timer.start();

    }

    @Override
    public void removeNotify() {
        super.removeNotify();
        this.timer.stop();

    }

    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);

        if (this.image == null) {
            return;
        }

        g.drawImage(this.image, 0, 0, this);

    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT
     * modify this code. The content of this method is always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(204, 255, 255));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 400,
                        Short.MAX_VALUE));
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 300,
                        Short.MAX_VALUE));
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
